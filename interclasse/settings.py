"""
Django settings for interclasse project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

from dotenv import load_dotenv
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ("true", "1", "t")


# Carregar a lista do .env
domains = os.getenv("HOST", "").split(",")

ALLOWED_HOSTS = [f"{domain.strip()}" for domain in domains]


# Application definition

INSTALLED_APPS = [
    'app',
    'channels',
    'django.contrib.auth',
    "jazzmin", 
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_user_agents",
]

JAZZMIN_SETTINGS = {
    "site_title": "Painel JIFS",
    "site_header": "Administração JIFS",
    "site_brand": "JIFS",
    "welcome_sign": "Bem-vindo ao painel",
    "copyright": "JIFS Interclass 2025",
    "search_model": ["auth.User", "auth.Group"],

    "show_sidebar": True,
    "navigation_expanded": True,
    #"hide_apps": ["auth"],   
    "hide_models": [],

    "theme": "cerulean",  
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    "django_user_agents.middleware.UserAgentMiddleware",
]

ROOT_URLCONF = 'interclasse.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'interclasse.wsgi.application'
ASGI_APPLICATION = 'interclasse.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer', 
    },
}

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if (os.getenv("DBTYPE") == "MySQL" or os.getenv("DBTYPE") == "mysql"):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.getenv("DBNAME"),
            'USER': os.getenv("DBUSER"),
            'PASSWORD': os.getenv("DBPASSWORD"),
            # Or an IP Address that your DB is hosted on
            'HOST': os.getenv("DBHOST"),
            'PORT': os.getenv("DBPORT"),
        }
    }

elif (os.getenv("DBTYPE") == "SQLite3" or os.getenv("DBTYPE") == "sqlite3"):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR / 'db.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_L10N = True

USE_TZ = True

LANGUAGES = [
    ('pt-br', 'Português'),
    ('en', 'Inglês'),
    ('es', 'Espanhol'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

AUTH_USER_MODEL = 'app.CustomUser'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = '/media/'

if (os.getenv("ENVIRONMENT") == 'DEV' or os.getenv("ENVIRONMENT") == 'dev'):
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static/')
    ]
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
    STATIC_ROOT = BASE_DIR / 'staticfiles'

elif (os.getenv("ENVIRONMENT") == 'PROD' or os.getenv("ENVIRONMENT") == 'prod'):
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static/')
    ]
    MEDIA_ROOT = BASE_DIR / 'media'
    STATIC_ROOT = BASE_DIR / 'staticfiles'

X_FRAME_OPTIONS = 'SAMEORIGIN'

CSRF_COOKIE_SECURE = False

# Adicionar os prefixos http:// e https://
CSRF_TRUSTED_ORIGINS = [f"http://{domain.strip()}" for domain in domains] + \
                       [f"https://{domain.strip()}" for domain in domains]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SESSION_EXPIRE_AT_BROWSER_CLOSE = True
